// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: echopb/service.proto

package echopb

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EchoService_Aasversion_FullMethodName                   = "/echopb.EchoService/Aasversion"
	EchoService_Aasgettoken_FullMethodName                  = "/echopb.EchoService/Aasgettoken"
	EchoService_Aasgettoken1_FullMethodName                 = "/echopb.EchoService/Aasgettoken1"
	EchoService_Cmsversion_FullMethodName                   = "/echopb.EchoService/Cmsversion"
	EchoService_Cmscacert_FullMethodName                    = "/echopb.EchoService/Cmscacert"
	EchoService_Cmstlscert_FullMethodName                   = "/echopb.EchoService/Cmstlscert"
	EchoService_Hvsversion_FullMethodName                   = "/echopb.EchoService/Hvsversion"
	EchoService_Hvsprivacyca_FullMethodName                 = "/echopb.EchoService/Hvsprivacyca"
	EchoService_HvsIdentityChallengeRequest_FullMethodName  = "/echopb.EchoService/HvsIdentityChallengeRequest"
	EchoService_HvsIdentityChallengeResponse_FullMethodName = "/echopb.EchoService/HvsIdentityChallengeResponse"
	EchoService_AasDownloadApiToken_FullMethodName          = "/echopb.EchoService/AasDownloadApiToken"
	EchoService_AasDownloadCredentials_FullMethodName       = "/echopb.EchoService/AasDownloadCredentials"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	Aasversion(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoReply, error)
	Aasgettoken(ctx context.Context, in *Aastoken, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	Aasgettoken1(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	Cmsversion(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	Cmscacert(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	Cmstlscert(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	Hvsversion(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoReply, error)
	Hvsprivacyca(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoReply, error)
	HvsIdentityChallengeRequest(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error)
	HvsIdentityChallengeResponse(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error)
	AasDownloadApiToken(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error)
	AasDownloadCredentials(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Aasversion(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoService_Aasversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Aasgettoken(ctx context.Context, in *Aastoken, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, EchoService_Aasgettoken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Aasgettoken1(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, EchoService_Aasgettoken1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Cmsversion(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, EchoService_Cmsversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Cmscacert(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, EchoService_Cmscacert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Cmstlscert(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, EchoService_Cmstlscert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Hvsversion(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoService_Hvsversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) Hvsprivacyca(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoService_Hvsprivacyca_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) HvsIdentityChallengeRequest(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoService_HvsIdentityChallengeRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) HvsIdentityChallengeResponse(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoService_HvsIdentityChallengeResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) AasDownloadApiToken(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoService_AasDownloadApiToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) AasDownloadCredentials(ctx context.Context, in *MyStructRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoService_AasDownloadCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility.
type EchoServiceServer interface {
	Aasversion(context.Context, *EchoMessage) (*EchoReply, error)
	Aasgettoken(context.Context, *Aastoken) (*wrappers.StringValue, error)
	Aasgettoken1(context.Context, *MyStructRequest) (*wrappers.StringValue, error)
	Cmsversion(context.Context, *EchoMessage) (*wrappers.StringValue, error)
	Cmscacert(context.Context, *EchoMessage) (*wrappers.StringValue, error)
	Cmstlscert(context.Context, *EchoMessage) (*wrappers.StringValue, error)
	Hvsversion(context.Context, *EchoMessage) (*EchoReply, error)
	Hvsprivacyca(context.Context, *EchoMessage) (*EchoReply, error)
	HvsIdentityChallengeRequest(context.Context, *MyStructRequest) (*EchoReply, error)
	HvsIdentityChallengeResponse(context.Context, *MyStructRequest) (*EchoReply, error)
	AasDownloadApiToken(context.Context, *MyStructRequest) (*EchoReply, error)
	AasDownloadCredentials(context.Context, *MyStructRequest) (*EchoReply, error)
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEchoServiceServer struct{}

func (UnimplementedEchoServiceServer) Aasversion(context.Context, *EchoMessage) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aasversion not implemented")
}
func (UnimplementedEchoServiceServer) Aasgettoken(context.Context, *Aastoken) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aasgettoken not implemented")
}
func (UnimplementedEchoServiceServer) Aasgettoken1(context.Context, *MyStructRequest) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aasgettoken1 not implemented")
}
func (UnimplementedEchoServiceServer) Cmsversion(context.Context, *EchoMessage) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmsversion not implemented")
}
func (UnimplementedEchoServiceServer) Cmscacert(context.Context, *EchoMessage) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmscacert not implemented")
}
func (UnimplementedEchoServiceServer) Cmstlscert(context.Context, *EchoMessage) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmstlscert not implemented")
}
func (UnimplementedEchoServiceServer) Hvsversion(context.Context, *EchoMessage) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hvsversion not implemented")
}
func (UnimplementedEchoServiceServer) Hvsprivacyca(context.Context, *EchoMessage) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hvsprivacyca not implemented")
}
func (UnimplementedEchoServiceServer) HvsIdentityChallengeRequest(context.Context, *MyStructRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HvsIdentityChallengeRequest not implemented")
}
func (UnimplementedEchoServiceServer) HvsIdentityChallengeResponse(context.Context, *MyStructRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HvsIdentityChallengeResponse not implemented")
}
func (UnimplementedEchoServiceServer) AasDownloadApiToken(context.Context, *MyStructRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AasDownloadApiToken not implemented")
}
func (UnimplementedEchoServiceServer) AasDownloadCredentials(context.Context, *MyStructRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AasDownloadCredentials not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}
func (UnimplementedEchoServiceServer) testEmbeddedByValue()                     {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	// If the following call pancis, it indicates UnimplementedEchoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_Aasversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Aasversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Aasversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Aasversion(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Aasgettoken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aastoken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Aasgettoken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Aasgettoken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Aasgettoken(ctx, req.(*Aastoken))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Aasgettoken1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Aasgettoken1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Aasgettoken1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Aasgettoken1(ctx, req.(*MyStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Cmsversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Cmsversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Cmsversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Cmsversion(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Cmscacert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Cmscacert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Cmscacert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Cmscacert(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Cmstlscert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Cmstlscert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Cmstlscert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Cmstlscert(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Hvsversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Hvsversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Hvsversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Hvsversion(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_Hvsprivacyca_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Hvsprivacyca(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_Hvsprivacyca_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Hvsprivacyca(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_HvsIdentityChallengeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).HvsIdentityChallengeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_HvsIdentityChallengeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).HvsIdentityChallengeRequest(ctx, req.(*MyStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_HvsIdentityChallengeResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).HvsIdentityChallengeResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_HvsIdentityChallengeResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).HvsIdentityChallengeResponse(ctx, req.(*MyStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_AasDownloadApiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).AasDownloadApiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_AasDownloadApiToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).AasDownloadApiToken(ctx, req.(*MyStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_AasDownloadCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).AasDownloadCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_AasDownloadCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).AasDownloadCredentials(ctx, req.(*MyStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "echopb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aasversion",
			Handler:    _EchoService_Aasversion_Handler,
		},
		{
			MethodName: "Aasgettoken",
			Handler:    _EchoService_Aasgettoken_Handler,
		},
		{
			MethodName: "Aasgettoken1",
			Handler:    _EchoService_Aasgettoken1_Handler,
		},
		{
			MethodName: "Cmsversion",
			Handler:    _EchoService_Cmsversion_Handler,
		},
		{
			MethodName: "Cmscacert",
			Handler:    _EchoService_Cmscacert_Handler,
		},
		{
			MethodName: "Cmstlscert",
			Handler:    _EchoService_Cmstlscert_Handler,
		},
		{
			MethodName: "Hvsversion",
			Handler:    _EchoService_Hvsversion_Handler,
		},
		{
			MethodName: "Hvsprivacyca",
			Handler:    _EchoService_Hvsprivacyca_Handler,
		},
		{
			MethodName: "HvsIdentityChallengeRequest",
			Handler:    _EchoService_HvsIdentityChallengeRequest_Handler,
		},
		{
			MethodName: "HvsIdentityChallengeResponse",
			Handler:    _EchoService_HvsIdentityChallengeResponse_Handler,
		},
		{
			MethodName: "AasDownloadApiToken",
			Handler:    _EchoService_AasDownloadApiToken_Handler,
		},
		{
			MethodName: "AasDownloadCredentials",
			Handler:    _EchoService_AasDownloadCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echopb/service.proto",
}

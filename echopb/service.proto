syntax = "proto3";
package echopb;

option go_package = "./echopb";

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";

message DynamicMessage {
  google.protobuf.Struct data = 1;
}

message MyStructRequest {
  google.protobuf.Struct data = 1; // Using Struct for dynamic data
}

message EchoMessage {
 string value = 1;
}

message EchoReply {
 string value = 1;
}

message Aastoken {
 string username = 1;
 string password = 2;
}

message Data { bytes bytes = 32; }
message IdMessage {
  string uuid = 1;
}

message ResponseBodyOut {
  message Response {
    string data = 1;
  }
  Response response = 2;
}

service EchoService {
  rpc Aasversion(EchoMessage) returns (EchoReply) {
    option (google.api.http) = {
      get: "/aas/v1/version"
    };
  }

  rpc Aasgettoken(Aastoken) returns (.google.protobuf.StringValue) {
    option (google.api.http) = {
      post: "/aas/v1/token"
      body: "*"
    };
  }

  rpc Aasgettoken1(MyStructRequest) returns (.google.protobuf.StringValue)  {
    option (google.api.http) = {
      post: "/aas/v1/token1"
      body: "*"
    };
  }

  rpc Cmsversion(EchoMessage) returns (.google.protobuf.StringValue) {
    option (google.api.http) = {
      get: "/cms/v1/version"
    };
  }

  /*rpc Cmscacert(EchoMessage) returns (EchoReply) {
    option (google.api.http) = {
      get: "/cms/v1/ca-certificates"
      response_body : "value"
    };
  }*/

  rpc Cmscacert(EchoMessage) returns (.google.protobuf.StringValue) {
    option (google.api.http) = {
      get: "/cms/v1/ca-certificates"
      /*response_body : "response"*/
    };
  }
  

  rpc Cmstlscert(EchoMessage) returns (.google.protobuf.StringValue) {
    option (google.api.http) = {
      post: "/cms/v1/certificates"
      body: "*"
    };
  }

  rpc Hvsversion(EchoMessage) returns (EchoReply) {
    option (google.api.http) = {
      get: "/hvs/v2/version"
    };
  }

  rpc Hvsprivacyca(EchoMessage) returns (EchoReply) {
    option (google.api.http) = {
      get: "/hvs/v2/ca-certificates/aik"
      response_body : "value"
    };
  }

  rpc HvsIdentityChallengeRequest(MyStructRequest) returns (EchoReply) {
    option (google.api.http) = {
      post: "/hvs/v2/privacyca/identity-challenge-request"
      body: "*"
      response_body : "value"
    };
  }

  rpc HvsIdentityChallengeResponse(MyStructRequest) returns (EchoReply) {
    option (google.api.http) = {
      post: "/hvs/v2/privacyca/identity-challenge-response"
      body: "*"
      response_body : "value"
    };
  }

  rpc AasDownloadApiToken(MyStructRequest) returns (EchoReply) {
    option (google.api.http) = {
      post: "/aas/v1/custom-claims-token"
      body: "*"
      response_body : "value"
    };
  }

  rpc AasDownloadCredentials(MyStructRequest) returns (EchoReply) {
    option (google.api.http) = {
      post: "/aas/v1/credentials"
      body: "*"
      response_body : "value"
    };
  }
}

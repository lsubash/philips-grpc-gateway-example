// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: echopb/service.proto

package echopb

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DynamicMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *_struct.Struct `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DynamicMessage) Reset() {
	*x = DynamicMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicMessage) ProtoMessage() {}

func (x *DynamicMessage) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicMessage.ProtoReflect.Descriptor instead.
func (*DynamicMessage) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{0}
}

func (x *DynamicMessage) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type MyStructRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *_struct.Struct `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // Using Struct for dynamic data
}

func (x *MyStructRequest) Reset() {
	*x = MyStructRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyStructRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyStructRequest) ProtoMessage() {}

func (x *MyStructRequest) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyStructRequest.ProtoReflect.Descriptor instead.
func (*MyStructRequest) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{1}
}

func (x *MyStructRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type EchoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EchoMessage) Reset() {
	*x = EchoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoMessage) ProtoMessage() {}

func (x *EchoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoMessage.ProtoReflect.Descriptor instead.
func (*EchoMessage) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{2}
}

func (x *EchoMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EchoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EchoReply) Reset() {
	*x = EchoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoReply) ProtoMessage() {}

func (x *EchoReply) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoReply.ProtoReflect.Descriptor instead.
func (*EchoReply) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{3}
}

func (x *EchoReply) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Aastoken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Aastoken) Reset() {
	*x = Aastoken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aastoken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aastoken) ProtoMessage() {}

func (x *Aastoken) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aastoken.ProtoReflect.Descriptor instead.
func (*Aastoken) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{4}
}

func (x *Aastoken) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Aastoken) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,32,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{5}
}

func (x *Data) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type IdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *IdMessage) Reset() {
	*x = IdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMessage) ProtoMessage() {}

func (x *IdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMessage.ProtoReflect.Descriptor instead.
func (*IdMessage) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{6}
}

func (x *IdMessage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ResponseBodyOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ResponseBodyOut_Response `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *ResponseBodyOut) Reset() {
	*x = ResponseBodyOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBodyOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBodyOut) ProtoMessage() {}

func (x *ResponseBodyOut) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBodyOut.ProtoReflect.Descriptor instead.
func (*ResponseBodyOut) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseBodyOut) GetResponse() *ResponseBodyOut_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

type ResponseBodyOut_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseBodyOut_Response) Reset() {
	*x = ResponseBodyOut_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echopb_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBodyOut_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBodyOut_Response) ProtoMessage() {}

func (x *ResponseBodyOut_Response) ProtoReflect() protoreflect.Message {
	mi := &file_echopb_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBodyOut_Response.ProtoReflect.Descriptor instead.
func (*ResponseBodyOut_Response) Descriptor() ([]byte, []int) {
	return file_echopb_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ResponseBodyOut_Response) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_echopb_service_proto protoreflect.FileDescriptor

var file_echopb_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x0e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x0f, 0x4d, 0x79, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x0b, 0x45, 0x63, 0x68,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21,
	0x0a, 0x09, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x42, 0x0a, 0x08, 0x41, 0x61, 0x73, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x1c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x1f, 0x0a, 0x09, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x4f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4f,
	0x75, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xe0, 0x09, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x41, 0x61, 0x73, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70,
	0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0b, 0x41, 0x61, 0x73, 0x67, 0x65, 0x74, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x10, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x41, 0x61, 0x73,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d,
	0x2f, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x60, 0x0a,
	0x0c, 0x41, 0x61, 0x73, 0x67, 0x65, 0x74, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x12, 0x17, 0x2e,
	0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22,
	0x0e, 0x2f, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x31, 0x12,
	0x58, 0x0a, 0x0a, 0x43, 0x6d, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e,
	0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x6d, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x43, 0x6d, 0x73,
	0x63, 0x61, 0x63, 0x65, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e,
	0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x63, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x2d, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0a, 0x43, 0x6d,
	0x73, 0x74, 0x6c, 0x73, 0x63, 0x65, 0x72, 0x74, 0x12, 0x13, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70,
	0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x63, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a,
	0x48, 0x76, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x65, 0x63, 0x68,
	0x6f, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x68, 0x76, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0c, 0x48,
	0x76, 0x73, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x63, 0x61, 0x12, 0x13, 0x2e, 0x65, 0x63,
	0x68, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x62, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x2f, 0x68, 0x76, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x61, 0x2d, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x61, 0x69, 0x6b, 0x12,
	0x89, 0x01, 0x0a, 0x1b, 0x48, 0x76, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70,
	0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x62, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x2f,
	0x68, 0x76, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x63, 0x61,
	0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x1c,
	0x48, 0x76, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x2e, 0x65,
	0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x3a, 0x01, 0x2a, 0x62, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2d, 0x2f, 0x68, 0x76, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x63, 0x61, 0x2f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x41, 0x61, 0x73,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x17, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x62, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1b,
	0x2f, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2d, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6b, 0x0a, 0x16, 0x41,
	0x61, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x17, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x4d,
	0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x65, 0x63, 0x68, 0x6f, 0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x62, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x13, 0x2f, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x65, 0x63,
	0x68, 0x6f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_echopb_service_proto_rawDescOnce sync.Once
	file_echopb_service_proto_rawDescData = file_echopb_service_proto_rawDesc
)

func file_echopb_service_proto_rawDescGZIP() []byte {
	file_echopb_service_proto_rawDescOnce.Do(func() {
		file_echopb_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_echopb_service_proto_rawDescData)
	})
	return file_echopb_service_proto_rawDescData
}

var file_echopb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_echopb_service_proto_goTypes = []any{
	(*DynamicMessage)(nil),           // 0: echopb.DynamicMessage
	(*MyStructRequest)(nil),          // 1: echopb.MyStructRequest
	(*EchoMessage)(nil),              // 2: echopb.EchoMessage
	(*EchoReply)(nil),                // 3: echopb.EchoReply
	(*Aastoken)(nil),                 // 4: echopb.Aastoken
	(*Data)(nil),                     // 5: echopb.Data
	(*IdMessage)(nil),                // 6: echopb.IdMessage
	(*ResponseBodyOut)(nil),          // 7: echopb.ResponseBodyOut
	(*ResponseBodyOut_Response)(nil), // 8: echopb.ResponseBodyOut.Response
	(*_struct.Struct)(nil),           // 9: google.protobuf.Struct
	(*wrappers.StringValue)(nil),     // 10: google.protobuf.StringValue
}
var file_echopb_service_proto_depIdxs = []int32{
	9,  // 0: echopb.DynamicMessage.data:type_name -> google.protobuf.Struct
	9,  // 1: echopb.MyStructRequest.data:type_name -> google.protobuf.Struct
	8,  // 2: echopb.ResponseBodyOut.response:type_name -> echopb.ResponseBodyOut.Response
	2,  // 3: echopb.EchoService.Aasversion:input_type -> echopb.EchoMessage
	4,  // 4: echopb.EchoService.Aasgettoken:input_type -> echopb.Aastoken
	1,  // 5: echopb.EchoService.Aasgettoken1:input_type -> echopb.MyStructRequest
	2,  // 6: echopb.EchoService.Cmsversion:input_type -> echopb.EchoMessage
	2,  // 7: echopb.EchoService.Cmscacert:input_type -> echopb.EchoMessage
	2,  // 8: echopb.EchoService.Cmstlscert:input_type -> echopb.EchoMessage
	2,  // 9: echopb.EchoService.Hvsversion:input_type -> echopb.EchoMessage
	2,  // 10: echopb.EchoService.Hvsprivacyca:input_type -> echopb.EchoMessage
	1,  // 11: echopb.EchoService.HvsIdentityChallengeRequest:input_type -> echopb.MyStructRequest
	1,  // 12: echopb.EchoService.HvsIdentityChallengeResponse:input_type -> echopb.MyStructRequest
	1,  // 13: echopb.EchoService.AasDownloadApiToken:input_type -> echopb.MyStructRequest
	1,  // 14: echopb.EchoService.AasDownloadCredentials:input_type -> echopb.MyStructRequest
	3,  // 15: echopb.EchoService.Aasversion:output_type -> echopb.EchoReply
	10, // 16: echopb.EchoService.Aasgettoken:output_type -> google.protobuf.StringValue
	10, // 17: echopb.EchoService.Aasgettoken1:output_type -> google.protobuf.StringValue
	10, // 18: echopb.EchoService.Cmsversion:output_type -> google.protobuf.StringValue
	10, // 19: echopb.EchoService.Cmscacert:output_type -> google.protobuf.StringValue
	10, // 20: echopb.EchoService.Cmstlscert:output_type -> google.protobuf.StringValue
	3,  // 21: echopb.EchoService.Hvsversion:output_type -> echopb.EchoReply
	3,  // 22: echopb.EchoService.Hvsprivacyca:output_type -> echopb.EchoReply
	3,  // 23: echopb.EchoService.HvsIdentityChallengeRequest:output_type -> echopb.EchoReply
	3,  // 24: echopb.EchoService.HvsIdentityChallengeResponse:output_type -> echopb.EchoReply
	3,  // 25: echopb.EchoService.AasDownloadApiToken:output_type -> echopb.EchoReply
	3,  // 26: echopb.EchoService.AasDownloadCredentials:output_type -> echopb.EchoReply
	15, // [15:27] is the sub-list for method output_type
	3,  // [3:15] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_echopb_service_proto_init() }
func file_echopb_service_proto_init() {
	if File_echopb_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_echopb_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DynamicMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MyStructRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EchoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EchoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Aastoken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*IdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseBodyOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echopb_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseBodyOut_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_echopb_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_echopb_service_proto_goTypes,
		DependencyIndexes: file_echopb_service_proto_depIdxs,
		MessageInfos:      file_echopb_service_proto_msgTypes,
	}.Build()
	File_echopb_service_proto = out.File
	file_echopb_service_proto_rawDesc = nil
	file_echopb_service_proto_goTypes = nil
	file_echopb_service_proto_depIdxs = nil
}
